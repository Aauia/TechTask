from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bitrix_client import *
from keyboards import *





async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –ª–∏–¥–æ–≤ Bitrix24.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    leads = get_old_leads()
    if not leads:
        await update.message.reply_text("–í—Å–µ –ª–∏–¥—ã –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return

    for lead in leads:
        phone = lead.get("PHONE", "")
        text = f"Lead #{lead['ID']}\n–ò–º—è: {lead['NAME']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        await update.message.reply_text(text, reply_markup=lead_keyboard(lead["ID"]))



async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    def safe_edit(text, reply_markup=None):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        if query.message.text != text or query.message.reply_markup != reply_markup:
            return query.edit_message_text(text, reply_markup=reply_markup)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if query.data == "back_to_menu":
        await safe_edit(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return

    if query.data.startswith("menu:"):
        menu_type = query.data.split(":")[1]

        if menu_type == "old":
            leads = get_old_leads()
            if not leads:
                await safe_edit(
                    "–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
                )
                return

            for lead in leads:
                phone = lead.get("PHONE", "‚Äî")
                text = f"Lead #{lead['ID']}\n–ò–º—è: {lead['NAME']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                await query.message.reply_text(
                    text,
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ Called", callback_data=f"called:{lead['ID']}"),
                            InlineKeyboardButton("üí¨ Wrote", callback_data=f"wrote:{lead['ID']}"),
                            InlineKeyboardButton("‚è≥ Postpone 2h", callback_data=f"postpone:{lead['ID']}"),
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                        ]
                    ])
                )

        elif menu_type == "in_process":
            leads = get_leads_by_status("IN_PROCESS")
            if not leads:
                text = "–õ–∏–¥–æ–≤ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Ç."
            else:
                text = "–õ–∏–¥—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n\n" + "\n".join(f"#{l['ID']} {l['NAME']} | –¢–µ–ª–µ—Ñ–æ–Ω: {l['PHONE']}" for l in leads)

            await safe_edit(
                text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )

        elif menu_type == "postponed":
            leads = get_leads_by_status("POSTPONED")
            if not leads:
                text = "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –Ω–µ—Ç."
            else:
                text = "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ª–∏–¥—ã:\n\n" + "\n".join(f"#{l['ID']} {l['NAME']} | –¢–µ–ª–µ—Ñ–æ–Ω: {l['PHONE']}" for l in leads)

            await safe_edit(
                text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
            )
    elif query.data.startswith(("called:", "wrote:", "postpone:")):
        try:
            action, lead_id = query.data.split(":")
        except ValueError:
            await safe_edit("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞")
            return

        if action.strip().lower() == "called":
            update_lead_status(lead_id, "IN_PROCESS")
            add_comment_to_lead(lead_id, "Menedger called")
            await safe_edit(f"Lead #{lead_id} ‚Üí ‚úÖ –û—Ç–º–µ—á–µ–Ω –∫–∞–∫ 'Called'")

        elif action.strip().lower() == "wrote":
            update_lead_status(lead_id, "IN_PROCESS")
            add_comment_to_lead(lead_id, "Menedger wrote")
            await safe_edit(f"Lead #{lead_id} ‚Üí üí¨ –û—Ç–º–µ—á–µ–Ω –∫–∞–∫ 'Wrote'")


        elif action == "postpone":
            resp = postpone_lead_task(lead_id, minutes=120)
            update_lead_status(lead_id, "POSTPONED")
            add_comment_to_lead(lead_id, "–õ–∏–¥ –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ 2 —á–∞—Å–∞")

            task_id = resp.get("result", {}).get("task", {}).get("id")
            if task_id:
                await query.edit_message_text(
                    f"Lead #{lead_id} ‚Üí ‚è≥ –û—Ç–ª–æ–∂–µ–Ω –Ω–∞ 2 —á–∞—Å–∞ (Task ID: {task_id})"
                )
            else:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è Lead #{lead_id}")